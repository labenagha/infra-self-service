name: Provision Storage Account

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        type: string
      resourceName:
        description: 'Storage Account Name'
        required: true
        type: string
      accountConfig:
        description: 'Account Configuration (JSON)'
        required: false
        default: '{"kind":"StorageV2","tier":"Standard","replication":"LRS","accessTier":"Hot"}'
        type: string
      securityConfig:
        description: 'Security Configuration (JSON)'
        required: false
        default: '{"httpsOnly":true,"minTls":"TLS1_2","publicAccess":false,"sharedKeys":true}'
        type: string
      networkConfig:
        description: 'Network Configuration (JSON)'
        required: false
        default: '{"defaultAction":"Deny","bypass":"AzureServices"}'
        type: string
      dataProtectionConfig:
        description: 'Data Protection Configuration (JSON)'
        required: false
        default: '{"softDelete":true,"retentionDays":7}'
        type: string

jobs:
  provision:
    name: Provision Storage Account
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Parse Input JSON
        id: parse-json
        run: |
          echo "Parsing configuration JSON..."
          # Parse account config
          ACCOUNT_CONFIG='${{ github.event.inputs.accountConfig }}'
          ACCOUNT_KIND=$(echo $ACCOUNT_CONFIG | jq -r '.kind')
          ACCOUNT_TIER=$(echo $ACCOUNT_CONFIG | jq -r '.tier')
          ACCOUNT_REPLICATION=$(echo $ACCOUNT_CONFIG | jq -r '.replication')
          ACCESS_TIER=$(echo $ACCOUNT_CONFIG | jq -r '.accessTier')
          
          # Parse security config
          SECURITY_CONFIG='${{ github.event.inputs.securityConfig }}'
          HTTPS_ONLY=$(echo $SECURITY_CONFIG | jq -r '.httpsOnly')
          MIN_TLS=$(echo $SECURITY_CONFIG | jq -r '.minTls')
          PUBLIC_ACCESS=$(echo $SECURITY_CONFIG | jq -r '.publicAccess')
          SHARED_KEYS=$(echo $SECURITY_CONFIG | jq -r '.sharedKeys')
          
          # Parse network config
          NETWORK_CONFIG='${{ github.event.inputs.networkConfig }}'
          DEFAULT_ACTION=$(echo $NETWORK_CONFIG | jq -r '.defaultAction')
          BYPASS=$(echo $NETWORK_CONFIG | jq -r '.bypass')
          
          # Parse data protection config
          DATA_CONFIG='${{ github.event.inputs.dataProtectionConfig }}'
          SOFT_DELETE=$(echo $DATA_CONFIG | jq -r '.softDelete')
          RETENTION_DAYS=$(echo $DATA_CONFIG | jq -r '.retentionDays')
          
          # Set outputs for next steps
          echo "account_kind=$ACCOUNT_KIND" >> $GITHUB_OUTPUT
          echo "account_tier=$ACCOUNT_TIER" >> $GITHUB_OUTPUT
          echo "account_replication=$ACCOUNT_REPLICATION" >> $GITHUB_OUTPUT
          echo "access_tier=$ACCESS_TIER" >> $GITHUB_OUTPUT
          echo "https_only=$HTTPS_ONLY" >> $GITHUB_OUTPUT
          echo "min_tls=$MIN_TLS" >> $GITHUB_OUTPUT
          echo "public_access=$PUBLIC_ACCESS" >> $GITHUB_OUTPUT
          echo "shared_keys=$SHARED_KEYS" >> $GITHUB_OUTPUT
          echo "default_action=$DEFAULT_ACTION" >> $GITHUB_OUTPUT
          echo "bypass=$BYPASS" >> $GITHUB_OUTPUT
          echo "soft_delete=$SOFT_DELETE" >> $GITHUB_OUTPUT
          echo "retention_days=$RETENTION_DAYS" >> $GITHUB_OUTPUT
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}
          terraform init
      
      - name: Create Terraform Variables File
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}
          cat > storage-account.auto.tfvars <<EOF
            resource_name                      = "${{ github.event.inputs.resourceName }}"
            account_kind                       = "${{ steps.parse-json.outputs.account_kind }}"
            account_tier                       = "${{ steps.parse-json.outputs.account_tier }}"
            account_replication_type           = "${{ steps.parse-json.outputs.account_replication }}"
            access_tier                        = "${{ steps.parse-json.outputs.access_tier }}"
            https_traffic_only_enabled         = ${{ steps.parse-json.outputs.https_only }}
            minimum_tls_version                = "${{ steps.parse-json.outputs.min_tls }}"
            public_network_access_enabled      = ${{ steps.parse-json.outputs.public_access }}
            shared_access_key_enabled          = ${{ steps.parse-json.outputs.shared_keys }}
            default_action                     = "${{ steps.parse-json.outputs.default_action }}"
            bypass                             = ["${{ steps.parse-json.outputs.bypass }}"]
            soft_delete_enabled                = ${{ steps.parse-json.outputs.soft_delete }}
            soft_delete_retention_days         = ${{ steps.parse-json.outputs.retention_days }}
          EOF
      
      - name: Terraform Plan
        id: plan
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}
          terraform plan -out=tfplan
      
      - name: Terraform Apply
        id: apply
        if: success()
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}
          terraform apply -auto-approve tfplan
      
      - name: Done
        run: echo "âœ… Storage Account provisioned successfully!"
