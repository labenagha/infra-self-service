name: Provision Service Bus Topic

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev/test)'
        required: true
        type: choice
        options:
          - dev
          - test
      resourceName:
        description: 'Service Bus Topic Name'
        required: true
        type: string
      messageRetention:
        description: 'Message Retention (Days)'
        required: true
        default: '7'
        type: string
      maxSizeInMegabytes:
        description: 'Maximum Size (MB)'
        required: true
        default: '1024'
        type: string
      requiresDuplicateDetection:
        description: 'Enable Duplicate Detection'
        required: true
        default: 'false'
        type: string

jobs:
  provision_servicebus:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout your repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Azure Login with a single JSON creds secret (Service Principal + client secret)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # 3) Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # 4) Debug workspace (optional) — see what folders actually exist
      - name: List workspace contents
        run: |
          echo "Listing $GITHUB_WORKSPACE"
          ls -R $GITHUB_WORKSPACE

      # 5) Terraform Init
      - name: Terraform Init
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}
          terraform init

      # 6) Terraform Validate
      - name: Terraform Validate
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}
          terraform validate

      # 7) Terraform Apply
      - name: Terraform Apply
        run: |
          cd $GITHUB_WORKSPACE/modules/${{ github.event.inputs.environment }}

          # Optionally create a temporary .tfvars if your environment main.tf expects them:
          echo "resource_name                 = \"${{ github.event.inputs.resourceName }}\""      >  request.tfvars
          echo "message_retention             = \"${{ github.event.inputs.messageRetention }}\""  >> request.tfvars
          echo "max_size_megabytes            = \"${{ github.event.inputs.maxSizeInMegabytes }}\"" >> request.tfvars

          if [ "${{ github.event.inputs.requiresDuplicateDetection }}" == "true" ]; then
            echo "requires_duplicate_detection  = true" >> request.tfvars
          else
            echo "requires_duplicate_detection  = false" >> request.tfvars
          fi

          # Now apply, passing the .tfvars if needed
          terraform apply -auto-approve -var-file=request.tfvars

      # 8) Completion Notification
      - name: Notify completion
        run: |
          echo "✅ Service Bus Topic '${{ github.event.inputs.resourceName }}' provisioned successfully!"
          echo "Environment: '${{ github.event.inputs.environment }}'"
